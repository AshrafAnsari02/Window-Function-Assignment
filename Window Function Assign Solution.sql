-- 1. **Rank the customers based on the total amount they've spent on rentals.**
SELECT 
    c.first_name,
    c.last_name,
    SUM(p.amount) AS total_spent,
    RANK() OVER (ORDER BY SUM(p.amount) DESC) AS customer_rank
FROM 
    customers c
JOIN 
    payments p ON c.customer_id = p.customer_id
GROUP BY 
    c.customer_id, c.first_name, c.last_name;

-- 2. **Calculate the cumulative revenue generated by each film over time.**
SELECT 
    f.title,
    r.rental_date,
    SUM(p.amount) OVER (PARTITION BY f.film_id ORDER BY r.rental_date) AS cumulative_revenue
FROM 
    films f
JOIN 
    rentals r ON f.film_id = r.film_id
JOIN 
    payments p ON r.rental_id = p.rental_id;

-- 3. **Determine the average rental duration for each film, considering films with similar lengths.**
SELECT 
    f.title,
    AVG(DATEDIFF(r.return_date, r.rental_date)) AS average_rental_duration
FROM 
    films f
JOIN 
    rentals r ON f.film_id = r.film_id
GROUP BY 
    f.title, f.length;

-- 4. **Identify the top 3 films in each category based on their rental counts.**
WITH RankedFilms AS (
    SELECT 
        f.title,
        c.name AS category,
        COUNT(r.rental_id) AS rental_count,
        RANK() OVER (PARTITION BY c.category_id ORDER BY COUNT(r.rental_id) DESC) AS rank
    FROM 
        films f
    JOIN 
        rentals r ON f.film_id = r.film_id
    JOIN 
        categories c ON f.category_id = c.category_id
    GROUP BY 
        f.title, c.name, c.category_id
)
SELECT 
    title,
    category,
    rental_count
FROM 
    RankedFilms
WHERE 
    rank <= 3;


-- 5. **Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.**
SELECT 
    c.first_name,
    c.last_name,
    COUNT(r.rental_id) AS total_rentals,
    COUNT(r.rental_id) - (SELECT AVG(rental_count) FROM (SELECT COUNT(r.rental_id) AS rental_count FROM rentals r GROUP BY r.customer_id) AS avg_rentals) AS rental_difference
FROM 
    customers c
JOIN 
    rentals r ON c.customer_id = r.customer_id
GROUP BY 
    c.customer_id, c.first_name, c.last_name;


-- 6. **Find the monthly revenue trend for the entire rental store over time.**
SELECT 
    DATE_FORMAT(r.rental_date, '%Y-%m') AS month,
    SUM(p.amount) AS monthly_revenue
FROM 
    rentals r
JOIN 
    payments p ON r.rental_id = p.rental_id
GROUP BY 
    DATE_FORMAT(r.rental_date, '%Y-%m')
ORDER BY 
    DATE_FORMAT(r.rental_date, '%Y-%m');


-- 7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**
SELECT 
    c.first_name,
    c.last_name,
    SUM(p.amount) AS total_spent
FROM 
    customers c
JOIN 
    payments p ON c.customer_id = p.customer_id
GROUP BY 
    c.customer_id, c.first_name, c.last_name
HAVING 
    SUM(p.amount) >= (SELECT PERCENTILE_CONT(0.8) WITHIN GROUP (ORDER BY total_amount) FROM (SELECT SUM(p.amount) AS total_amount FROM payments p JOIN customers c ON p.customer_id = c.customer_id GROUP BY c.customer_id) AS amounts);


-- 8. **Calculate the running total of rentals per category, ordered by rental count.**
SELECT 
    c.name AS category,
    f.title,
    r.rental_count,
    SUM(r.rental_count) OVER (PARTITION BY c.category_id ORDER BY r.rental_count DESC) AS running_total
FROM 
    categories c
JOIN 
    films f ON c.category_id = f.category_id
JOIN 
    (SELECT 
         film_id, 
         COUNT(rental_id) AS rental_count 
     FROM 
         rentals 
     GROUP BY 
         film_id) r 
ON f.film_id = r.film_id
ORDER BY 
    c.category_id, r.rental_count DESC;

